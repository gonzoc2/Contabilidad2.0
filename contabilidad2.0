import pandas as pd
import streamlit as st
from datetime import datetime
from io import BytesIO, StringIO
import OTMrunReport as rr
import requests
import gspread

st.set_page_config(
    page_title="Comparativo contabilidad",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Aplicar el decorador de manera correcta
@st.cache_data
def cargar_datos(url):
    response = requests.get(url)
    response.raise_for_status()  # Verifica si hubo algún error en la descarga
    archivo_excel = BytesIO(response.content)
    return pd.read_excel(archivo_excel, engine="openpyxl")
    # Especifica la hoja que deseas cargar
    hoja_deseada = "Base provisiones"

    df_provisiones = cargar_datos_pro(provisiones, sheet_name=hoja_deseada)
    df_mapeo = cargar_datos(mapeo)
    df_base = cargar_datos(base)
    @st.cache_data
    def get_xtr_as_dataframe():
        # 1. Obtener el reporte (contenido del archivo XTR)
        headers = rr.headers(st.secrets["RR"]["usuario_otm"], st.secrets["RR"]["contrasena_otm"])
        algo = rr.runReport(st.secrets["RR"]["path"], 'ekck.fa.us6', headers)

        # 2. Verificar el tipo de "algo"
        if isinstance(algo, bytes):
            algo = algo.decode('utf-8')  # Convertir bytes a string

        # 3. Convertir el contenido XTR a DataFrame
        try:
            xtr_io = StringIO(algo)  # Crear un buffer en memoria
            df = pd.read_csv(xtr_io, sep=",", low_memory=False)  # Ajusta el delimitador aquí
        except Exception as e:
            st.error(f"Error al procesar el archivo XTR: {e}")
            return None

        return df, algo

    df, algo = get_xtr_as_dataframe()
    df_original = df.copy()

        # Selección y renombrado de columnas
    columnas_d = ['DEFAULT_EFFECTIVE_DATE', 'DEFAULT_EFFECTIVE_DATE', 'SEGMENT1', 'SEGMENT2', 'SEGMENT3', 'SEGMENT5', 'CREDIT', 'DEBIT']
    nuevo_nombre = ['Año_A','Mes_A', 'Empresa_A', 'CeCo_A', 'Proyecto_A', 'Cuenta_A', 'Credit_A', 'Debit_A']
        # Validar que las columnas existen en el DataFrame
    columnas_disponibles = [col for col in columnas_d if col in df.columns]
        # Seleccionar y renombrar las columnas
    df = df[columnas_disponibles]
    df.columns = nuevo_nombre[:len(columnas_disponibles)]
    df['Cuenta_A'] = pd.to_numeric(df['Cuenta_A'], errors='coerce')
    df['Debit_A'] = pd.to_numeric(df['Debit_A'], errors='coerce')
    df['Credit_A'] = pd.to_numeric(df['Credit_A'], errors='coerce')

        # Rellenar valores NaN con 0 (opcional, dependiendo de tus datos)
    df[['Debit_A', 'Credit_A']] = df[['Debit_A', 'Credit_A']].fillna(0)
        # Calcular la columna Neto_A
    df['Neto_A'] = df.apply(
            lambda row: row['Debit_A'] - row['Credit_A'] ,
            axis=1
        )
    df['Año_A'] = pd.to_datetime(df['Año_A'], errors='coerce')
    df['Año_A'] = df['Año_A'].dt.year

        # Convertir la columna 'Mes_A' al tipo datetime
    df['Mes_A'] = pd.to_datetime(df['Mes_A'], errors='coerce')
    df = df.merge(df_mapeo, on='Cuenta_A', how='left')
        # Crear una nueva columna con el mes (en formato numérico o nombre, según prefieras)
    df['Mes_A'] = df['Mes_A'].dt.month 
    df = df.groupby(['Año_A', 'Mes_A', 'Proyecto_A', 'CeCo_A', 'Empresa_A', 'Cuenta_A'])['Debit_A','Credit_A','Neto_A'].sum().reset_index()
    df = df.merge(df_mapeo, on='Cuenta_A', how='left')

    meses = df['Mes_A'].unique().tolist()
    años = df['Año_A'].unique().tolist()
    empresas = df['Empresa_A'].unique().tolist()
    st.write('')
    @st.cache_data
    def to_excel(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name="Sheet1")
        return output.getvalue()

    # Botón de descarga
    excel_data = to_excel(df)
    col1, col2 = st.columns(2)
    col1.download_button(
        label="Descargar Movimientos de sistema",
        data=excel_data,
        file_name="datos.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    def limpiar_cache():
        st.cache_data.clear()  # Limpia el caché de los datos
        
    if col2.button("Volver a recargar datos del sistema"):
        limpiar_cache()
        st.warning("recargar la pagina")
    col1, col2 = st.columns(2)
    año = col1.selectbox('SELECCIONAR AÑO', años)
    mes = col2.selectbox('SELECCIONAR MES', meses)

    df = df[(df['Año_A'] == año) & (df['Mes_A'] == mes)]
    col1, col2 = st.columns(2)
    ingreso_50 = df[(df['CeCo_A'] == 50) & (df['Cuenta_A'] >399999999) & (df['Cuenta_A'] <500000000)]['Neto_A'].sum()
    egreso_50 = df[(df['CeCo_A'] == 50) & (df['Cuenta_A'] >500000000)]['Neto_A'].sum()
    col1.write(f'INGRESO INTEREMPRESAS: {ingreso_50:,.2f}')
    col2.write(f'EGRESO INTEREMPRESAS: {egreso_50:,.2f}')
    dfsb = df[~(df['CeCo_A'] == 50) & (df['Cuenta_A']>399999999)]
    orden_meses = {
        1: 'ene.', 2: 'feb.', 3: 'mar.', 4: 'abr.',
        5: 'may.', 6: 'jun.', 7: 'jul.', 8: 'ago.',
        9: 'sep.', 10: 'oct.', 11: 'nov.', 12: 'dic.'
    }
    mes_a_numero = {v: k for k, v in orden_meses.items()}

    # Cambiar la columna 'mes' de abreviaturas a números usando map
    df_base['Mes_A'] = df_base['Mes_A'].map(mes_a_numero)

    proyectos = dfsb['Proyecto_A'].unique().tolist()
    historicos = ['CASETAS', 'RENTA', 'SOFTWARE', 'NOMINA ADMINISTRATIVOS','NOMINA OPERADORES']
    def df_cuentas (df, y, cat, col, mes, df_base):
        df_list = []
        for x in proyectos:
            df_pro = df[df['Proyecto_A'] == x]
            df_cat = df_pro[df_pro[y] == cat]['Neto_A'].sum(skipna=True)
            if cat in historicos:
                df_base = df_base[df_base['Mes_A'] == (mes -1)]
                df_pro_provisiones = df_base[df_base['Proyecto_A'] == x]
                df_cat_provisiones = df_pro_provisiones[df_pro_provisiones[y] == cat]['Neto_A'].sum(skipna=True)
            else:
                df_pro_provisiones = df_provisiones[df_provisiones['Proyecto_A'] == x]
                df_cat_provisiones = df_pro_provisiones[df_pro_provisiones[y] == cat]['Neto_A'].sum(skipna=True)
            data = {
                'PROYECTO' : [x],
                f'{cat} SISTEMA' : [df_cat],
                f'{cat} PROVISION' : [df_cat_provisiones] 
            }
            x = pd.DataFrame(data)
            df_list.append(x)

        df_final = pd.concat(df_list, ignore_index=True)
        nueva_fila = {
        df_final.columns[0] : 'ESGARI',
        df_final.columns[1] : df_final[df_final.columns[1]].sum(skipna=True),
        df_final.columns[2] : df_final[df_final.columns[2]].sum(skipna=True)
            }
        nueva_fila = pd.DataFrame([nueva_fila])
        df_final = pd.concat([df_final, nueva_fila], ignore_index=True)
        df_final = df_final.set_index('PROYECTO')
        col.subheader(f'COMPARACIÓN {cat}')
        col.write(df_final)

    categorias = ['INGRESO','NOMINA OPERADORES', 'NOMINA ADMINISTRATIVOS', 'FLETES', 'RENTA DE REMOLQUES', 'COMBUSTIBLE', 'CASETAS', 'RENTA', 'SOFTWARE']
    i = 0
    col1, col2, col3 = st.columns(3)

    # Alternar entre tres columnas
    i = 0
    for x in categorias:
        if i % 3 == 0:
            # Columna 1
            current_col = col1
        elif i % 3 == 1:
            # Columna 2
            current_col = col2
        else:
            # Columna 3
            current_col = col3
        df_cuentas(dfsb, 'Categoria_A', x, current_col, mes, df_base)
        i = i+1

    cuentas = ['DAÑOS', 'DIF DE KILOMETRAJE', 'MANTENIMIENTO EQ TRANSPORTE', 'SEGUROS Y FIANZAS']
    i = 0
    col1, col2, col3 = st.columns(3)

    # Alternar entre tres columnas
    i = 0
    for x in cuentas:
        if i % 3 == 0:
            # Columna 1
            current_col = col1
        elif i % 3 == 1:
            # Columna 2
            current_col = col2
        else:
            # Columna 3
            current_col = col3
        df_cuentas(dfsb, 'Cuenta_Nombre_A', x, current_col, mes, df_base)
        i = i+1
    if st.button("Cerrar sesión"):
        st.session_state.authenticated = False
        st.rerun()